import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3 as sql
import turtle as tur
import colorsys as cs
import random

class GeometricDesignApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Mood tracker")
        self.canvas = tk.Canvas(self.master, width=500, height=500, bg="white")
        self.canvas.pack(expand=tk.YES, fill=tk.BOTH)
        self.shape_var = tk.StringVar(value="Rectangle")
        self.create_shapes_dropdown()
        self.draw_button = ttk.Button(self.master, text="Draw", command=self.draw_shape)
        self.draw_button.pack(pady=10)

    def create_shapes_dropdown(self):
        shapes_label = ttk.Label(self.master, text=" How was your day: \n A Happy rectangle :) \n A Sad Triangle :( \n A balanced Circle <3")
        shapes_label.pack()
        shapes = ["Rectangle", "Circle", "Triangle"]
        shapes_dropdown = ttk.Combobox(self.master, textvariable=self.shape_var, values=shapes, state="readonly")
        shapes_dropdown.pack(pady=5)

    def draw_shape(self):
        shape_type = self.shape_var.get()

        if shape_type == "Rectangle":
            self.draw_rectangle()
        elif shape_type == "Circle":
            self.draw_circle()
        elif shape_type == "Triangle":
            self.draw_triangle()

    def draw_rectangle(self):
        x = random.randint(50, 450)
        y = random.randint(50, 450)
        width = random.randint(30, 100)
        height = random.randint(30, 100)
        self.canvas.create_rectangle(x, y, x + width, y + height, fill=self.get_random_color())

    def draw_circle(self):
        x = random.randint(50, 450)
        y = random.randint(50, 450)
        radius = random.randint(15, 70)
        self.canvas.create_oval(x - radius, y - radius, x + radius, y + radius, fill=self.get_random_color())

    def draw_triangle(self):
        x1 = random.randint(50, 450)
        y1 = random.randint(50, 450)
        x2 = x1 + random.randint(30, 70)
        y2 = y1 + random.randint(30, 70)
        x3 = x1 - random.randint(30, 70)
        y3 = y1 + random.randint(30, 70)
        self.canvas.create_polygon(x1, y1, x2, y2, x3, y3, fill=self.get_random_color())

    def get_random_color(self):
        return "#{:06x}".format(random.randint(0, 0xFFFFFF))


class ToDoListApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Palaks Journal")
        self.master.geometry("800x600+500+250")
        self.master.resizable(0, 0)
        self.master.configure(bg="#FAEBD7")

        self.the_connection = sql.connect('listOfTasks.db')
        self.the_cursor = self.the_connection.cursor()
        self.the_cursor.execute('create table if not exists tasks (title text)')

        self.tasks = []

        self.header_frame = tk.Frame(self.master, bg="MistyRose")
        self.functions_frame = tk.Frame(self.master, bg="MistyRose")
        self.listbox_frame = tk.Frame(self.master, bg="MistyRose")

        self.header_frame.pack(fill="both")
        self.functions_frame.pack(side="left", expand=True, fill="both")
        self.listbox_frame.pack(side="right", expand=True, fill="both")

        self.header_label = ttk.Label(
            self.header_frame,
            text="Personal Journal",
            font=("Segoe Script", "30"),
            background="RosyBrown2",
            foreground="#8B4513"
        )
        self.header_label.pack(padx=20, pady=20)

        self.task_label = ttk.Label(
            self.functions_frame,
            text="Enter the Task:",
            font=("Segoe Script", "11", "bold"),
            background="RosyBrown2",
            foreground="#000000"
        )
        self.task_label.place(x=30, y=40)

        self.task_field = ttk.Entry(
            self.functions_frame,
            font=("Consolas", "12"),
            width=18,
            background="#FFF8DC",
            foreground="#A52A2A"
        )
        self.task_field.place(x=30, y=80)

        self.add_button = ttk.Button(
            self.functions_frame,
            text="Add Task",
            width=24,
            command=self.add_task
        )
        self.del_button = ttk.Button(
            self.functions_frame,
            text="Delete Task",
            width=24,
            command=self.delete_task
        )
        self.del_all_button = ttk.Button(
            self.functions_frame,
            text="Delete All Tasks",
            width=24,
            command=self.delete_all_tasks
        )
        self.exit_button = ttk.Button(
            self.functions_frame,
            text="Exit",
            width=24,
            command=self.close
        )
        self.add_design_button = ttk.Button(
            self.functions_frame,
            text="Mood Tracker",
            width=24,
            command=self.open_geometric_design_window
        )

        self.add_button.place(x=30, y=120)
        self.del_button.place(x=30, y=160)
        self.del_all_button.place(x=30, y=200)
        self.exit_button.place(x=30, y=240)
        self.add_design_button.place(x=30, y=280)

        self.task_listbox = tk.Listbox(
            self.listbox_frame,
            width=40,
            height=20,
            selectmode='SINGLE',
            background="#FFFFFF",
            foreground="#000000",
            selectbackground="#CD853F",
            selectforeground="#FFFFFF"
        )
        self.task_listbox.place(x=10, y=20)

        self.date_label = ttk.Label(
            self.functions_frame,
            text="Select Date:",
            font=("Segoe Script", "11", "bold"),
            background="RosyBrown2",
            foreground="#000000"
        )
        self.date_label.place(x=30, y=320)

        self.day_combobox = ttk.Combobox(
            self.functions_frame,
            values=[str(i) for i in range(1, 32)],
            state="readonly",
            width=5
        )
        self.day_combobox.set("Day")
        self.day_combobox.place(x=130, y=320)

        self.month_combobox = ttk.Combobox(
            self.functions_frame,
            values=[
                "January", "February", "March", "April",
                "May", "June", "July", "August",
                "September", "October", "November", "December"
            ],
            state="readonly",
            width=10
        )
        self.month_combobox.set("Month")
        self.month_combobox.place(x=190, y=320)

        self.year_combobox = ttk.Combobox(
            self.functions_frame,
            values=[str(i) for i in range(2022, 2030)],
            state="readonly",
            width=5
        )
        self.year_combobox.set("Year")
        self.year_combobox.place(x=310, y=320)

        self.retrieve_database()
        self.list_update()

    def open_geometric_design_window(self):
        design_window = tk.Toplevel(self.master)
        design_app = GeometricDesignApp(design_window)

    def add_task(self):
        task_string = self.task_field.get()
        if len(task_string) == 0:
            messagebox.showinfo('Error', 'Field is Empty.')
        else:
            self.tasks.append(task_string)
            self.the_cursor.execute('insert into tasks values (?)', (task_string,))
            self.list_update()
            self.task_field.delete(0, 'end')

    def list_update(self):
        self.clear_list()
        for task in self.tasks:
            self.task_listbox.insert('end', task)

    def delete_task(self):
        try:
            the_value = self.task_listbox.get(self.task_listbox.curselection())
            if the_value in self.tasks:
                self.tasks.remove(the_value)
                self.list_update()
                self.the_cursor.execute('delete from tasks where title = ?', (the_value,))
        except:
            messagebox.showinfo('Error', 'No Task Selected. Cannot Delete.')

    def delete_all_tasks(self):
        message_box = messagebox.askyesno('Delete All', 'Are you sure?')
        if message_box:
            while len(self.tasks) != 0:
                self.tasks.pop()
            self.the_cursor.execute('delete from tasks')
            self.list_update()

    def clear_list(self):
        self.task_listbox.delete(0, 'end')

    def close(self):
        print(self.tasks)
        self.master.destroy()

    def retrieve_database(self):
        while len(self.tasks) != 0:
            self.tasks.pop()
        for row in self.the_cursor.execute('select title from tasks'):
            self.tasks.append(row[0])

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoListApp(root)
    root.mainloop()
    app.the_connection.commit()
    app.the_cursor.close()
